CREATE DATABASE valeriana_db;

SHOW DATABASES;

USE valeriana_db;

SET FOREIGN_KEY_CHECKS=0;

DROP TABLE users;

-- USERS TABLE

CREATE TABLE users (
	user_id BINARY(16) DEFAULT (UUID_TO_BIN(uuid())),
    user_name VARCHAR(50) NOT NULL UNIQUE,
    user_roleId INT NOT NULL,
	user_password VARCHAR(255) NOT NULL UNIQUE,
    email_address VARCHAR(320) NOT NULL UNIQUE,
    email_isValidated BOOLEAN NOT NULL DEFAULT (0),
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT (now()),
    FOREIGN KEY(user_roleId) REFERENCES roles(role_id),
    PRIMARY KEY(user_id)
);

ALTER TABLE users
ADD FOREIGN KEY (user_roleId) REFERENCES roles(role_id);

ALTER TABLE users
ADD CONSTRAINT foreign_role_key
FOREIGN KEY (user_roleId) REFERENCES roles(role_id);


SELECT BIN_TO_UUID(user_id) user_id, user_name, user_roleId, user_password, email_address, email_isValidated, first_name, last_name, created_at FROM users;

SELECT BIN_TO_UUID(user_id) user_id, user_name, user_roleId, role_name, user_password, email_address, email_isValidated, first_name, last_name, created_at FROM users
INNER JOIN roles ON users.user_roleId = roles.role_id;

UPDATE users SET user_roleId = 2 WHERE email_address = 'jona@gmail.com';

UPDATE users SET user_password = '$2b$10$N8LAMM.vW6rlM/wQftjLnu2kV9UH9jRnrEE/YKLFl1n8uDjD2YrlG' WHERE email_address = 'rata@gmail.com';

----------------------------
-- PATIENTS VIEW
DROP VIEW patients;

CREATE VIEW patients AS
SELECT user_id, user_name, user_password, email_address, first_name, last_name, created_at 
FROM users WHERE user_roleId = 2;

SELECT COUNT(user_id) FROM patients WHERE user_id = UUID_TO_BIN('66db2bc9-f396-11ee-82c8-704d7b63e3fe');

SELECT *, BIN_TO_UUID(user_id) FROM patients;
----------------------------
-- PSYCHOLOGIST  VIEW
DROP VIEW psychologists;

CREATE VIEW psychologists AS
SELECT user_id, user_name, user_password, email_address, first_name, last_name, created_at 
FROM users WHERE user_roleId = 3;

SELECT COUNT(user_id) FROM psychologists WHERE user_id = UUID_TO_BIN('66db2bc9-f396-11ee-82c8-704d7b63e3fe');

SELECT *, BIN_TO_UUID(user_id) user_id FROM psychologists;
----------------------------
-- DOCTORS VIEW
DROP VIEW doctors;

CREATE VIEW doctors AS
SELECT user_id, user_name, user_password, email_address, first_name, last_name, created_at 
FROM users WHERE user_roleId = 4;

SELECT COUNT(user_id) FROM doctors WHERE user_id = UUID_TO_BIN('66db2bc9-f396-11ee-82c8-704d7b63e3fe');

SELECT * FROM doctors;
----------------------------
-- ROLES TABLE
DROP TABLE roles;

CREATE TABLE roles (
	role_id INT NOT NULL AUTO_INCREMENT,
    role_name VARCHAR(50) NOT NULL UNIQUE,
	PRIMARY KEY(role_id)
);

ALTER TABLE roles
ADD CONSTRAINT foreign_user_role_key
FOREIGN KEY(role_id) REFERENCES users(user_roleId);

INSERT INTO roles (role_name) VALUES ('admin'), ('patient'), ('psychologist'), ('doctor');
----------------------------
-- TABLE PSYCHOLOGIST-PATIENTS
CREATE TABLE psychologists_patients (
	psychologist_patient_id BINARY(16) DEFAULT (UUID_TO_BIN(uuid())),
	psychologist_id BINARY(16) NOT NULL,
    patient_id BINARY(16) NOT NULL UNIQUE,
    isAccepted BOOLEAN NOT NULL DEFAULT (0),
    FOREIGN KEY(psychologist_id) REFERENCES users(user_id),
    FOREIGN KEY(patient_id) REFERENCES users(user_id),
    PRIMARY KEY(psychologist_patient_id, patient_id)
);

DROP TRIGGER limit_only_psychologists_patients_relationship;

delimiter //
CREATE TRIGGER limit_only_psychologists_patients_relationship
	BEFORE INSERT ON psychologists_patients
    FOR EACH ROW
    BEGIN 
		IF NOT EXISTS (SELECT * FROM psychologists WHERE user_id = NEW.psychologist_id) OR 
		NOT EXISTS (SELECT * FROM patients WHERE user_id = NEW.patient_id)
        THEN SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'ER_PSYCHOLOGIST_PATIENT_ONLY only psychologists patients relationship are allowed';
		END IF;
	END;
//
delimiter ;

INSERT INTO psychologists_patients (psychologist_id, patient_id)
VALUES (UUID_TO_BIN('03b940b1-fc32-11ee-8cff-704d7b63e3fe'), UUID_TO_BIN('66db2bc9-f396-11ee-82c8-704d7b63e3fe'));
-- patient 03b940b1-fc32-11ee-8cff-704d7b63e3fe  'ddf8d717-f692-11ee-9a3e-704d7b63e3fe'
-- doctor 0f7b6945-fc2e-11ee-8cff-704d7b63e3fe 'a887d8ae-fc2d-11ee-8cff-704d7b63e3fe'

ALTER TABLE psychologists_patients
ADD CONSTRAINT check_id_equality
CHECK (psychologist_id <> patient_id);

DROP TABLE psychologists_patients;

SELECT BIN_TO_UUID(psychologist_id) psychologist_id, BIN_TO_UUID(patient_id) patient_id FROM psychologists_patients;

SELECT * FROM psychologists_patients;

SELECT BIN_TO_UUID(psychologists_patients_id) psychologists_patients_id, BIN_TO_UUID(user_id) user_id, user_name, user_roleId, email_address, email_isValidated, first_name, last_name, created_at 
FROM psychologists_patients
INNER JOIN users ON users.user_id = psychologists_patients.psychologist_id
WHERE patient_id = UUID_TO_BIN('433738e4-fceb-11ee-8cff-704d7b63e3fe');
----------------------------
----------------------------
-- TABLE MEETINGS
SET time_zone = '+0:00';

CREATE TABLE meetings (
	meeting_id BINARY(16) DEFAULT (UUID_TO_BIN(uuid())),
	meeting_start_time DATETIME NOT NULL,
    meeting_duration TIME NOT NULL,
    meeting_end_time DATETIME DEFAULT (ADDTIME(meeting_start_time, meeting_duration)),
    psychologist_patient_id BINARY(16) NOT NULL,
    FOREIGN KEY(psychologist_patient_id) REFERENCES psychologists_patients(psychologist_patient_id),
    PRIMARY KEY(meeting_id)
);

DROP TRIGGER limit_overlapping;
delimiter //
CREATE TRIGGER limit_overlapping
	BEFORE INSERT ON meetings
    FOR EACH ROW
    BEGIN 
		IF EXISTS (SELECT * FROM meetings WHERE NEW.meeting_start_time >= meeting_start_time AND NEW.meeting_start_time < ADDTIME(meeting_start_time, meeting_duration)) OR 
		EXISTS (SELECT * FROM meetings WHERE ADDTIME(NEW.meeting_start_time, NEW.meeting_duration) > meeting_start_time AND ADDTIME(NEW.meeting_start_time, NEW.meeting_duration) <= ADDTIME(meeting_start_time, meeting_duration))
        THEN SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'ER_MEETING_OVERLAPPING';
		ELSE
			SET NEW.meeting_end_time = ADDTIME(NEW.meeting_start_time, NEW.meeting_duration);
		END IF;
	END;
//
delimiter ;

INSERT INTO meetings (meeting_start_time, meeting_duration, psychologists_patients_id)
VALUES
('2003-01-02 00:01:02','00:1:30', '1');

SELECT * FROM meetings ORDER BY psychologist_patient_id, meeting_start_time;

SELECT BIN_TO_UUID(meeting_id) meeting_id, BIN_TO_UUID(meetings.psychologist_patient_id) psychologist_patient_id, BIN_TO_UUID(psychologist_id) psychologist_id, BIN_TO_UUID(patient_id) patient_id, meeting_start_time, meeting_end_time, meeting_duration
FROM meetings
INNER JOIN psychologists_patients ON psychologists_patients.psychologist_patient_id = meetings.psychologist_patient_id
ORDER BY psychologist_patient_id, meeting_start_time;


DROP TABLE meetings;
----------------------------
CREATE TABLE meetingRules (
	rule_id BINARY(16) DEFAULT (UUID_TO_BIN(uuid())),
	rule_query DATETIME NOT NULL,
    psychologists_patients_id BINARY(16),
    psychologists_id BINARY(16) NOT NULL,
    FOREIGN KEY(psychologists_patients_id) REFERENCES psychologists_patients(psychologists_patients_id),
    FOREIGN KEY(psychologists_id) REFERENCES psychologists(psychologists_id),
    PRIMARY KEY(rule_id)
);
----------------------------
CREATE TABLE googleApi (
    user_id BINARY(16) NOT NULL,
    google_refresh_token VARCHAR(255) NOT NULL UNIQUE,
    google_scope VARCHAR(255) NOT NULL,
    google_calendar_id VARCHAR(255),
    google_calendar_is_sync BOOLEAN NOT NULL DEFAULT (0),
    FOREIGN KEY(user_id) REFERENCES users(user_id),
    PRIMARY KEY(user_id)
);

DROP TABLE googleApi;

/* DROP TRIGGER limit_scope_overlapping;
delimiter //
CREATE TRIGGER limit_scope_overlapping
	BEFORE INSERT ON googleApi
    FOR EACH ROW
    BEGIN 
		IF EXISTS (SELECT * FROM googleApi WHERE NEW.user_id = user_id AND NEW.google_scope = google_scope) 
        THEN SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'ER_TOKEN_SCOPE_OVERLAPPING';
		END IF;
	END;
//
delimiter ;*/

UPDATE googleApi SET google_refresh_token = 'jonathan' WHERE user_id = UUID_TO_BIN('15c58424-e55f-11ef-b6f2-79a7da4df4df');

SELECT * FROM googleApi;
----------------------------
CREATE TABLE notifications (
	id BINARY(16) NOT NULL,
    user_id BINARY(16) NOT NULL,
    message VARCHAR(255) NOT NULL,
    FOREIGN KEY(user_id) REFERENCES users(user_id),
    PRIMARY KEY(id)
);

----------------------------
CREATE TABLE config (
	user_id BINARY(16) NOT NULL,
    general_lang VARCHAR(2),
    general_theme VARCHAR(255),
    calendar_locale VARCHAR(255),
    calendar_time_zone VARCHAR(255),
    calendar_time_zones_list VARCHAR(8000),
    FOREIGN KEY(user_id) REFERENCES users(user_id),
    PRIMARY KEY(user_id)
);

INSERT INTO config (user_id) VALUES(UUID_TO_BIN('84db350e-ef0d-11ef-b6f2-79a7da4df4df'));

SELECT BIN_TO_UUID(config.user_id) user_id, user_name, general_lang, general_theme, calendar_locale, calendar_time_zone, calendar_time_zones_list
        FROM config
        INNER JOIN users ON users.user_id = config.user_id
        WHERE config.user_id = UUID_TO_BIN('84db350e-ef0d-11ef-b6f2-79a7da4df4df');

DROP TABLE config;

